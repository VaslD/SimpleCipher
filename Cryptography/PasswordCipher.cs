using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;

namespace VaslD.Utility.Cryptography
{
    public sealed class PasswordCipher : IDisposable
    {
        public const int KeySize = 256;

        // The default salt to use when none provided.
        // These bytes are randomly generated by "random.org" on May 10, 2020 at 16:25:23 UTC.
        private static readonly byte[] DefaultSalt = {
            0x22, 0x31, 0x56, 0xFD,
            0xEB, 0x2F, 0x06, 0x2D,
            0x46, 0x60, 0xAF, 0xB5,
            0xAD, 0xEF, 0x58, 0xFC
        };

        public string Password { get; }
        public string Salt { get; }

        private Aes Cipher { get; }

        /*
        private ICryptoTransform Encryptor { get; }
        private ICryptoTransform Decryptor { get; }
        */

        private readonly int iterationsCount;

        public PasswordCipher(string password) : this(password, DefaultSalt)
        {
        }

        public PasswordCipher(string password, byte[] salt) : this(password, salt, 20000)
        {
        }

        public PasswordCipher(string password, byte[] salt, int iterations)
        {
            if (salt.Length < 8) throw new ArgumentException("The salt must be an array of at least 8 bytes.", nameof(salt));
            if (!salt.Any(x => x != 0)) Console.Error.WriteLine("[PasswordCipher] Calling cipher constructor with empty salt. This is extremely insecure!");

            Password = password;
            Salt = Convert.ToBase64String(salt);
            iterationsCount = iterations;
            Cipher = InitCipher();
        }

        private Aes InitCipher()
        {
            var salt = Convert.FromBase64String(Salt);
            using var keyGen = new Rfc2898DeriveBytes(Password, salt, iterationsCount);
            var standaloneCipher = Aes.Create();
            standaloneCipher.KeySize = KeySize;
            standaloneCipher.Key = keyGen.GetBytes(KeySize / 8);
            standaloneCipher.Mode = CipherMode.CBC;
            standaloneCipher.IV = keyGen.GetBytes(16);
            standaloneCipher.Padding = PaddingMode.PKCS7;
            return standaloneCipher;
        }

        public void Dispose()
        {
            Cipher.Dispose();
        }

        #region Continuous Mode

        private byte[] lastEncryptedBlock;
        private byte[] lastDecryptedBlock;

        public string EncryptContinuousText(string plainText)
        {
            if (string.IsNullOrEmpty(plainText)) throw new ArgumentException("Cannot encrypt an empty string.", nameof(plainText));

            using var output = new MemoryStream();

            if (lastEncryptedBlock is null) lastEncryptedBlock = Cipher.IV;
            using var encryptor = Cipher.CreateEncryptor(Cipher.Key, lastEncryptedBlock);
            using var crypto = new CryptoStream(output, encryptor, CryptoStreamMode.Write);
            using (var writer = new StreamWriter(crypto)) writer.Write(plainText);

            var outBytes = output.ToArray();
            Buffer.BlockCopy(outBytes, outBytes.Length - 16, lastEncryptedBlock, 0, 16);

            /*
            var inBuffer = new byte[16];
            var bytesRead = 0;
            while ((bytesRead = input.Read(inBuffer)) > 0)
            {
                var bytesToAdd = 16 - bytesRead;
                if (bytesRead != 16)
                {
                    Buffer.BlockCopy(new byte[bytesToAdd], 0, inBuffer, bytesRead, bytesToAdd);
                    bytesRead = 16;
                }
                var outBuffer = new byte[16];
                var bytesWritten = Encryptor.TransformBlock(inBuffer, 0, bytesRead, outBuffer, 0);
                output.Write(outBuffer, 0, bytesWritten);
            }
            */

            return Convert.ToBase64String(outBytes);
        }

        public string DecryptContinuousText(string text)
        {
            if (string.IsNullOrEmpty(text)) throw new ArgumentException("Cannot decrypt an empty string.", nameof(text));

            var bytes = Convert.FromBase64String(text);
            using var input = new MemoryStream(bytes);

            if (lastDecryptedBlock is null) lastDecryptedBlock = Cipher.IV;
            using var decryptor = Cipher.CreateDecryptor(Cipher.Key, lastDecryptedBlock);
            using var crypto = new CryptoStream(input, decryptor, CryptoStreamMode.Read);
            using var reader = new StreamReader(crypto);

            /*
            var inBuffer = new byte[16];
            var bytesRead = 0;
            while ((bytesRead = input.Read(inBuffer)) > 0)
            {
                var outBuffer = new byte[16];
                var bytesWritten = Decryptor.TransformBlock(inBuffer, 0, bytesRead, outBuffer, 0);
                input.Write(outBuffer, 0, bytesWritten);
            }
            */
            Buffer.BlockCopy(bytes, bytes.Length - 16, lastDecryptedBlock, 0, 16);
            return reader.ReadToEnd();
        }

        #endregion Continuous Mode

        #region Standalone Mode

        public string EncryptTextOnce(string plainText)
        {
            if (string.IsNullOrEmpty(plainText)) throw new ArgumentException("Cannot encrypt an empty string.", nameof(plainText));

            using var output = new MemoryStream();
            using var encryptor = Cipher.CreateEncryptor(Cipher.Key, Cipher.IV);
            using var crypto = new CryptoStream(output, encryptor, CryptoStreamMode.Write);
            using (var writer = new StreamWriter(crypto)) writer.Write(plainText);

            /*
            var inBuffer = new byte[16];
            var bytesRead = 0;
            while ((bytesRead = input.Read(inBuffer)) > 0)
            {
                var bytesToAdd = 16 - bytesRead;
                if (bytesRead != 16)
                {
                    Buffer.BlockCopy(new byte[bytesToAdd], 0, inBuffer, bytesRead, bytesToAdd);
                    bytesRead = 16;
                }
                var outBuffer = new byte[16];
                var bytesWritten = Encryptor.TransformBlock(inBuffer, 0, bytesRead, outBuffer, 0);
                output.Write(outBuffer, 0, bytesWritten);
            }
            */

            return Convert.ToBase64String(output.ToArray());
        }

        public string DecryptTextOnce(string text)
        {
            if (string.IsNullOrEmpty(text)) throw new ArgumentException("Cannot decrypt an empty string.", nameof(text));

            var bytes = Convert.FromBase64String(text);
            using var input = new MemoryStream(bytes);
            using var decryptor = Cipher.CreateDecryptor(Cipher.Key, Cipher.IV);
            using var crypto = new CryptoStream(input, decryptor, CryptoStreamMode.Read);
            using var reader = new StreamReader(crypto);

            /*
            var inBuffer = new byte[16];
            var bytesRead = 0;
            while ((bytesRead = input.Read(inBuffer)) > 0)
            {
                var outBuffer = new byte[16];
                var bytesWritten = Decryptor.TransformBlock(inBuffer, 0, bytesRead, outBuffer, 0);
                input.Write(outBuffer, 0, bytesWritten);
            }
            */

            return reader.ReadToEnd();
        }

        #endregion Standalone Mode
    }
}
